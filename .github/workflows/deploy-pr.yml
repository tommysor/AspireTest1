name: deploy-pr

on:
  pull_request: 
    branches: [ 'main' ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      RG_ACR: ${{ vars.RG_ACR_PREFIX }}-${{ github.event.pull_request.number }}-${{ github.run_number }}-${{ github.run_attempt }}
      RG_APP: ${{ vars.RG_APP_PREFIX }}-${{ github.event.pull_request.number }}-${{ github.run_number }}-${{ github.run_attempt }}
      CONTAINER_VERSION_TAG: "pull-${{ github.event.pull_request.number }}-${{ github.run_number }}-${{ github.run_attempt }}"
      APISERVICE_CONTAINERREPOSITORY: ${{ vars.APISERVICE_CONTAINERREPOSITORY }}
      WEBFRONTEND_CONTAINERREPOSITORY: ${{ vars.WEBFRONTEND_CONTAINERREPOSITORY }}
    
    environment: PullRequest
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}    
    
    - name: deploy acr
      id: deployAcr
      run: |
        echo "Deploying Container registry"

        az group create --location norwayeast --name ${{ env.RG_ACR }}

        az deployment group create \
          --mode Complete \
          --resource-group "${{ env.RG_ACR }}" \
          --name "${{ env.RG_ACR }}" \
          --template-file ./.platform/main.acr.bicep \
          | tee az_create_acr_output.txt
        
        echo "# setting outputs"
        
        # containerRegistryUrl
        containerRegistryUrl=$(cat az_create_acr_output.txt | jq --raw-output '.properties.outputs.containerRegistryUrl.value')
        echo "containerRegistryUrl=$containerRegistryUrl" >> $GITHUB_OUTPUT
        # managedIdentityId
        managedIdentityId=$(cat az_create_acr_output.txt | jq --raw-output '.properties.outputs.managedIdentityId.value')
        echo "managedIdentityId=$managedIdentityId" >> $GITHUB_OUTPUT
        # managedIdentityClientId
        managedIdentityClientId=$(cat az_create_acr_output.txt | jq --raw-output '.properties.outputs.managedIdentityClientId.value')
        echo "managedIdentityClientId=$managedIdentityClientId" >> $GITHUB_OUTPUT
        
        echo "# done"

    - name: login containerRegistry
      run: az acr login --name ${{ steps.deployAcr.outputs.containerRegistryUrl }}

    - name: publish apiservice
      run: |
        echo "Publishing apiservice"

        pushd src/Test1.ApiService

        dotnet publish \
          -p ContainerRegistry='${{ steps.deployAcr.outputs.containerRegistryUrl }}' \
          -p PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"' \
          -p ContainerRepository=${{ env.APISERVICE_CONTAINERREPOSITORY }}

        popd

    - name: publish webfrontend
      run: |
        echo "Publishing webfrontend"

        pushd src/Test1.Web

        dotnet publish \
          -p ContainerRegistry='${{ steps.deployAcr.outputs.containerRegistryUrl }}' \
          -p PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"' \
          -p ContainerRepository=${{ env.WEBFRONTEND_CONTAINERREPOSITORY }}

        popd

    - name: deploy app environment
      run: |
        echo "Deploying applications"

        az group create --location norwayeast --name ${{ env.RG_APP }}

        # TODO deploy bicep

    - name: destroy
      if: always()
      run: |
        echo "Cleaning up"

        echo "deleting ${{ env.RG_ACR }}"
        az group delete --resource-group ${{ env.RG_ACR }} --yes
        echo "deleting ${{ env.RG_APP }}"
        az group delete --resource-group ${{ env.RG_APP }} --yes

        echo "done"
