name: deploy-pr

on:
  workflow_dispatch: 
  pull_request: 
    branches: [ 'main' ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_PLATFORM_NAME: "platform-${{ github.run_number }}-${{ github.run_attempt }}"
      RG_NAME: "rg-pull-${{ github.event.pull_request.number }}-${{ github.run_number }}-${{ github.run_attempt }}"
      CONTAINER_VERSION_TAG: "pull-${{ github.event.pull_request.number }}-${{ github.run_number }}-${{ github.run_attempt }}"
    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: create resource group
      run: az group create --location norwayeast --name ${{ env.RG_NAME }}

    - name: deploy platform
      id: deployPlatform
      run: |
        az deployment group create \
          --mode Complete \
          --resource-group "${{ env.RG_NAME }}" \
          --name "${{ env.DEPLOYMENT_PLATFORM_NAME }}" \
          --template-file ./.platform/main.bicep \
          --parameters @./.platform/main.parameters.pr.json \
          | tee az_create_output.txt

        echo '# Set outputs'
        # containerAppsEnvironmentId
        containerAppsEnvironmentId=$(cat az_create_output.txt | jq --raw-output '.properties.outputs.containerAppsEnvironmentId.value')
        echo "containerAppsEnvironmentId=$containerAppsEnvironmentId" >> $GITHUB_OUTPUT
        # containerRegistryId
        containerRegistryId=$(cat az_create_output.txt | jq --raw-output '.properties.outputs.containerRegistryId.value')
        echo "containerRegistryId=$containerRegistryId" >> $GITHUB_OUTPUT
        # containerRegistryUrl
        containerRegistryUrl=$(cat az_create_output.txt | jq --raw-output '.properties.outputs.containerRegistryUrl.value')
        echo "containerRegistryUrl=$containerRegistryUrl" >> $GITHUB_OUTPUT
        # managedIdentityId
        managedIdentityId=$(cat az_create_output.txt | jq --raw-output '.properties.outputs.managedIdentityId.value')
        echo "managedIdentityId=$managedIdentityId" >> $GITHUB_OUTPUT

    - name: echo output
      run: |
        echo "containerAppsEnvironmentId: ${{ steps.deployPlatform.outputs.containerAppsEnvironmentId }}"
        echo "containerRegistryId: ${{ steps.deployPlatform.outputs.containerRegistryId }}"
        echo "containerRegistryUrl: ${{ steps.deployPlatform.outputs.containerRegistryUrl }}"
        echo "managedIdentityId: ${{ steps.deployPlatform.outputs.managedIdentityId }}"

    - name: login containerRegistry
      run: az acr login --name ${{ steps.deployPlatform.outputs.containerRegistryUrl }}

    - name: publish apiservice
      run: |
        pushd src/Test1.ApiService

        dotnet publish \
          -p ContainerRegistry='${{ steps.deployPlatform.outputs.containerRegistryUrl }}' \
          -p:PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"'

        popd

    - name: publish webfrontend
      run: |
        pushd src/Test1.Web

        dotnet publish \
          -p ContainerRegistry='${{ steps.deployPlatform.outputs.containerRegistryUrl }}' \
          -p:PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"'

        popd

    - name: destroy
      if: always()
      run: az group delete --resource-group ${{ env.RG_NAME }} --yes
